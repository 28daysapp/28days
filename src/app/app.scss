// http://ionicframework.com/docs/theming/


// App Global Sass
// --------------------------------------------------
// Put style rules here that you want to apply globally. These
// styles are for the entire app and not just one component.
// Additionally, this file can be also used as an entry point
// to import other Sass files to be included in the output CSS.
//
// Shared Sass variables, which can be used to adjust Ionic's
// default Sass variables, belong in "theme/variables.scss".
//
// To declare rules for a specific mode, create a child rule
// for the .md, .ios, or .wp mode classes. The mode class is
// automatically applied to the <body> element in the app.

.title.title-md {
  position: absolute;
  left: 50%;
  top: 0;
  transform: translateX(-50%);
  height: 100%;
  width: 70%;
  text-align: center;
}

ion-icon {
  &[class*="coconut-"] {
      // Instead of using the font-based icons
      // We're applying SVG masks
      mask-size: contain;
      mask-position: 50% 50%;
      mask-repeat: no-repeat;
      background: currentColor;
      width: 1em;
      height: 1em;
  }
  // custom icons
  &[class*="coconut-home"] {
      mask-image: url(../assets/icon/home.png);
  }
  &[class*="coconut-icon2"] {
      mask-image: url(../assets/icon/customicon2.svg);
  }
  &[class*="coconut-icon3"] {
      mask-image: url(../assets/icon/customicon3.svg);
  }
}

.tabbar, .tabs-ios, .tabs-md , .tabs-wp{
  .tab-button-icon {
      background-repeat:no-repeat;
      background-position:center;
      height:24px;
      width:24px;
      background-size:contain;
      -webkit-background-size: contain;
      -moz-background-size: contain;
      -o-background-size: contain;
      &:before {
          display:none;
      }
  }
}

.tabs-ios {
a[aria-selected=false]{
   .tab-button-icon[ng-reflect-name=home], .tab-button-icon[aria-label=home] {
    background-image: url(../assets/icon/home.png);
  }
  .tab-button-icon[ng-reflect-name=hos], .tab-button-icon[aria-label=hos] {
    background-image: url(../assets/icon/hos.png);
  }
  .tab-button-icon[ng-reflect-name=chat], .tab-button-icon[aria-label=chat] {
    background-image: url(../assets/icon/chat.png);
  }
  .tab-button-icon[ng-reflect-name=supporter], .tab-button-icon[aria-label=supporter] {
    background-image: url(../assets/icon/supporter.png);
  }
  .tab-button-icon[ng-reflect-name=community], .tab-button-icon[aria-label=community] {
    background-image: url(../assets/icon/community.png);
  }
}
a[aria-selected=true] {
 //führ eventuellen text
 //span {
    //color: #f00; //whatever colour you want to use for the text
  //}
  .tab-button-icon[ng-reflect-name=home], .tab-button-icon[aria-label=home] {
    background-image: url(../assets/icon/home-on.png);
  }
  .tab-button-icon[ng-reflect-name=hos], .tab-button-icon[aria-label=hos] {
    background-image: url(../assets/icon/hos-on.png);
  }
  .tab-button-icon[ng-reflect-name=chat], .tab-button-icon[aria-label=chat] {
    background-image: url(../assets/icon/chat-on.png);
  }
  .tab-button-icon[ng-reflect-name=supporter], .tab-button-icon[aria-label=supporter] {
    background-image: url(../assets/icon/supporter-on.png);
  }
  .tab-button-icon[ng-reflect-name=community], .tab-button-icon[aria-label=community] {
    background-image: url(../assets/icon/community-on.png);
  }
}
}

.tabs-md {
a[aria-selected=false]{
   .tab-button-icon[ng-reflect-name=home], .tab-button-icon[aria-label=home] {
    background-image: url(../assets/icon/home.png);
  }
  .tab-button-icon[ng-reflect-name=hos], .tab-button-icon[aria-label=hos] {
    background-image: url(../assets/icon/hos.png);
  }
  .tab-button-icon[ng-reflect-name=chat], .tab-button-icon[aria-label=chat] {
    background-image: url(../assets/icon/chat.png);
  }
  .tab-button-icon[ng-reflect-name=supporter], .tab-button-icon[aria-label=supporter] {
    background-image: url(../assets/icon/supporter.png);
  }
  .tab-button-icon[ng-reflect-name=community], .tab-button-icon[aria-label=community] {
    background-image: url(../assets/icon/community.png);
  }
}

a[aria-selected=true] {
 //führ eventuellen text
 //span {
    //color: #f00; //whatever colour you want to use for the text
  //}
  .tab-button-icon[ng-reflect-name=home], .tab-button-icon[aria-label=home] {
    background-image: url(../assets/icon/home-on.png);
  }
  .tab-button-icon[ng-reflect-name=hos], .tab-button-icon[aria-label=hos] {
    background-image: url(../assets/icon/hos-on.png);
  }
  .tab-button-icon[ng-reflect-name=chat], .tab-button-icon[aria-label=chat] {
    background-image: url(../assets/icon/chat-on.png);
  }
  .tab-button-icon[ng-reflect-name=supporter], .tab-button-icon[aria-label=supporter] {
    background-image: url(../assets/icon/supporter-on.png);
  }
  .tab-button-icon[ng-reflect-name=community], .tab-button-icon[aria-label=community] {
    background-image: url(../assets/icon/community-on.png);
  }
}
}

.tabs-wp {
a[aria-selected=false]{
   .tab-button-icon[ng-reflect-name=home], .tab-button-icon[aria-label=home] {
    background-image: url(../assets/icon/home.png);
  }
  .tab-button-icon[ng-reflect-name=hos], .tab-button-icon[aria-label=hos] {
    background-image: url(../assets/icon/hos.png);
  }
  .tab-button-icon[ng-reflect-name=chat], .tab-button-icon[aria-label=chat] {
    background-image: url(../assets/icon/chat.png);
  }
  .tab-button-icon[ng-reflect-name=supporter], .tab-button-icon[aria-label=supporter] {
    background-image: url(../assets/icon/supporter.png);
  }
  .tab-button-icon[ng-reflect-name=community], .tab-button-icon[aria-label=community] {
    background-image: url(../assets/icon/community.png);
  }
}

a[aria-selected=true] {
 //führ eventuellen text
 //span {
    //color: #f00; //whatever colour you want to use for the text
  //}
  .tab-button-icon[ng-reflect-name=home], .tab-button-icon[aria-label=home] {
    background-image: url(../assets/icon/home-on.png);
  }
  .tab-button-icon[ng-reflect-name=hos], .tab-button-icon[aria-label=hos] {
    background-image: url(../assets/icon/hos-on.png);
  }
  .tab-button-icon[ng-reflect-name=chat], .tab-button-icon[aria-label=chat] {
    background-image: url(../assets/icon/chat-on.png);
  }
  .tab-button-icon[ng-reflect-name=supporter], .tab-button-icon[aria-label=supporter] {
    background-image: url(../assets/icon/supporter-on.png);
  }
  .tab-button-icon[ng-reflect-name=community], .tab-button-icon[aria-label=community] {
    background-image: url(../assets/icon/community-on.png);
  }
}
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}


// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))
//    md
@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
  $n: index($breakpoint-names, $name);
  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}


// Maximum breakpoint width. Null for the largest (last) breakpoint.
// The maximum value is calculated as the minimum of the next one less 0.1.
//
//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    767px
@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
  $next: breakpoint-next($name, $breakpoints);
  @return if($next, breakpoint-min($next, $breakpoints) - 1px, null);
}


// Creates text alignment classes based on screen size
// TODO this would be nice to add to the framework
@each $breakpoint in map-keys($grid-breakpoints) {
  $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

  @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
    // Provide text `[text-{bp}]` attributes for aligning text based on screen size
    [text#{$infix}-center] {
      text-align: center;
    }

    [text#{$infix}-left] {
      text-align: left;
    }

    [text#{$infix}-right] {
      text-align: right;
    }

    [hidden#{$infix}-up] {
      display: none;
    }
  }

  @include media-breakpoint-down($breakpoint, $grid-breakpoints) {
    [hidden#{$infix}-down] {
      display: none;
    }
  }
}
